Navigating the File System
    1. How do you move back and forth between directories?
        - You would use "cd" then directory name to move into the file.
        - "cd .." would take you back a directory

    2.  How do you create and delete files?
        - "touch" creates files
        - "rm" deletes files

    3.  How do you create and delete directories?
        - "mkdir" creates a directory
        - "rmdir" deletes a directory

    4.  How can I see exactly where I am within the filesystem?
        - Use "pwd"

    5.  How can I see the files and directories within the current directory that I am in?
        - Use "ls"

Git
    1.  How do you let git know you want to track changes made in a directory?
        - Use "git init"

    2.  How do you tell git that you like the work you’ve done and want it to be a part of a chunk of work to be saved?
        - Use "git add [file]" or "git add ."

    3.  How do you tell git you want to save a chunk of work?
        - Use "git commit -m '[message]' "
    4.  How do you tell git where to push your local changes up to a online repository?
        - Use "git push"

    5.  How can you safely work on a different version of your current project?
        - Use "git branch [branch name]"

    6.  How can you make that different version become a part of your main version?
        - Use "git merge [branch name]"

    7.  How do I move between versions of my project?
        - Use "git checkout [branch name]"

    8.  How can I go back to previous chunks of work that I’ve created and work from that point in time?
        - Use "git revert"

    9. Let’s say I wrote a bad message for a commit. How could I change it?
        - Use "git commit --amend "[New message]"

Python

    1.  How do I run my code from the terminal?
        - Use "python [file.py]

    2.  What can I use to reference a value later in my code?
        - Use a variable

    3.  How can I make my program display text or some value in my terminal?
        - Use "print" function

    4.  How can I make my code make decisions on which code to execute?
        - Use "if-else statement"

    5.  How can I repeat blocks of code based on conditions?
        - Use a function

    6.  Why is it critical to ensure that our conditions eventually become false when repeating blocks of code?
        - To prevent an infinite loop

    7.  What are sequences and what are the differences between them?
        - Sequences provides an ordered structure to the objects within
        - There are 2 types of sequences: Mutable and Immutable
            + Mutable sequences allows you to change the values within
                * Ex: Lists
            + Immutable sequences does not allow you to change the values within.
                * Ex: Tuplets

    8.  How do I access a value within the various types of sequences?
        - Use the variable for the sequence w/ "[]" and the position of the object.
        - Ex: Power = [1,2,3,4]
                print(Power[1]) ------------> Outcome: 2

    9.  What is an index when talking about sequences?
        - The index is the cpu's numeric order for the objects within.

    10. What is the index of the first value within a sequence?
        - The index always starts at "0" moving forward

    11. How can I add or remove a value from a sequence?
        - Use the sequence name w/ [index number] = whatever you want
        
    12. What is the index of the last value within a sequence?
        - Depends on the number of objects you have in the sequence
        - Going backwards, the last/first number is "-1".

    13. How can I get the length of a sequence?
        - Use "len()" then sequence name

    14. What can I use to reference and use a block of code later in my code?
        - Use a function

    15. What is DRY?
        - Acronym: Don't Repeat yourself

    16. What is Scope? Provide an example.
        - A block of code of a function

    17. What is the difference between parameters and arguments?
        - Parameters are place holder value used beside the function. Inside the ().
        - Arguments are the values actually used by the function.

    18. What is recursion?
        - A function that calls itself

    19. How can you return a value from a function?
        - use a "return" statement

    20. Describe a dictionary. How and why would it be useful?
        - Using a dictionary is like using a phonebook
        - Used to store values in key value pairs

    21. How can you remove a value from a dictionary?
        - Use ".pop()"

    22. How can you access and change values within a dictionary?
        - Use the dictionary name and the specific key for the value.

    23. What data types can a sequence hold?
        - Strings, Intergers, floats, etc.

    24. What data types can a dictionary hold?
        - Uses key: value pairs

    25. How can you iterate through a dictionary?
        - Use "for" loops

    26. What is object oriented programming?
        - A method used to categorize relateable properties into an object

    27. Describe a class? Why are they useful?
        - A class is like a blueprint
        - Used to categorize

    28. What are class properties? How would I give a class an initial set of properties?
        - Class name, variables and objects
        - Set the initial properties using "def __init__(objects)

    29. What are class methods?
        - Specific abilities given to an object.

    30. What is inheritence?
        - Sub-classes from an original class.